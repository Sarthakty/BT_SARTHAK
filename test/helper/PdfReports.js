/**
 * Created by BIBHU on 13-Jan-17.
 */
var pdf = require('pdfkit');
var mydocs = new pdf;
var fs = require('fs');
var dir = null;
var date = new Date();
var table = require('text-table');
var passedcount = 0;
var failedcount = 0;
var slno =1;
var sino =1;
var hight=250;

class PDF
{

    createPdfFolder()
    {
        var contents = fs.readFileSync("PropertiesFile/config.json");
        var jsonContent = JSON.parse(contents);
        console.log("currentDateAndTime:", jsonContent.currentDateAndTime);
        dir = 'pdfReports/Run_'+jsonContent.currentDateAndTime;

        if (!fs.existsSync(dir))
        {
            fs.mkdirSync(dir);
        }

    }

    createPdf(PdfName)
    {
        mydocs.pipe(fs.createWriteStream(dir+'/'+PdfName+'.pdf'));
    }

    summaryTable(module)
    {

        mydocs.text(module,30,70)
            .bold;
        mydocs.moveDown();

        mydocs.text('SI NO'+"                  "+'MODULE'+"                "+'PASSED'+"             "+'FAILED',50,150);

        var contents = fs.readFileSync("PropertiesFile/ACTIVITY MODULE.json");
        var contents1 = fs.readFileSync("PropertiesFile/INVENTORY MODULE.json");
        var jsonContent = JSON.parse(contents);
        var jsonContent1 = JSON.parse(contents1);
        mydocs.text(sino+"             "+jsonContent.modulename+"             "+jsonContent.passedcount+"                         "+jsonContent.failedcount,60,180);

        mydocs.text(sino+"             "+jsonContent1.modulename+"         "+jsonContent1.passedcount+"                        "+jsonContent1.failedcount,60,200);
        sino++;
    }

    pdfHeaderFileGeneration()
    {
        mydocs.font('Times-Roman')
            .fontSize(20)
            .text('AUTOMATION TEST REPORT',180,260)
            .bold;
        mydocs.moveDown();
        mydocs.font('Times-Roman')
            .fontSize(15)
            .text('Report generated by: Automation Team,'+date,70,300);
        mydocs.moveDown();
        mydocs.text('This report demonstrates the status of automation execution results in number, percentage of Passed, and  Failed Test Cases.',70,350)
        //mydocs.text('PASSED'+"       "+'FAILED',220,480);
        mydocs.image('./images/CBTlogo.png', 40, 70);
        mydocs.image('./images/logobrown.png', 360, 50);

    }

    pdfHeaderFileForSummary(module)
    {

        mydocs.text(module,30,70)
            .bold;

    }


    pdfHeaderFileForModule(module)
    {

        mydocs.text(module,30,70)
            .bold;
        mydocs.text('PASSED'+"       "+'FAILED',220,100);
    }


    pdfWriteData(tcId, description,result)
    {
        if(result=="Pass")
        {
            if(description.length<50)
            {
                var j =0;
                for(var i=description.length;i<=50;i++)
                {
                    description = description+" ";
                    j++;
                }

            }
            else if(description.length>=50)
            {

                var maxLength = 50-2 // maximum number of characters to extract

                description = description.slice(0, maxLength);

                description = description+"..";
            }
            var t = table([
                [slno, '||', tcId , '||', description , '||','Passed'],
            ], {align: ['c', 'c', 'c', 'c']});
            mydocs.text(t, 20, hight);
            passedcount++;
            slno++;
            hight = hight + 20;
        }
        else
        {
            var t = table([
                [slno, '|| ', tcId , '||', description, ' ||','Failed'],
            ], {align: ['c', 'c', 'c', 'c']});
            mydocs.text(t, 20, hight)
            failedcount++;
            slno++;
            hight = hight + 20;
        }
    }

    closeWelcomePdf()
    {
        mydocs.end();
    }

    closePdf(module)
    {

        var myOptions = {
            modulename:module, passedcount: passedcount,failedcount: failedcount
        }
        var data = JSON.stringify(myOptions);

        fs.writeFile('PropertiesFile/'+module+'.json', data, function (err) {
            if (err) {
                console.log('There has been an error saving your configuration data.');
                console.log(err.message);
                return;
            }//console.log('Configuration saved successfully.')
        })
        mydocs.text(passedcount+"                  "+failedcount,240,120);
        mydocs.end();
    }
}

module.exports=new PDF();